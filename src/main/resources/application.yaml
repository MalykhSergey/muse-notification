spring:
  datasource:
    url: jdbc:postgresql://${DB_URL:localhost:5433/notifications}?stringtype=unspecified
    username: ${DB_USER:spring}
    password: ${DB_PASSWORD:boot}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    open-in-view: false
    show-sql: true
  flyway:
    locations: classpath:db/migrations
    validate-on-migrate: true
    out-of-order: false
  security:
    oauth2:
      url: ${AUTH_SERVER_URL:http://localhost:8080}
      realm: ${AUTH_REALM:users-auth}
      client:
        registration:
          keycloak-admin:
            provider: keycloak
            realm: ${spring.security.oauth2.realm}
            client-id: ${AUTH_CLIENT:users-sync}
            client-secret: ${AUTH_CLIENT_SECRET:M11QUhkCuD5CXu72wtvql9eBDbgQbPZM}
            authorization-grant-type: client_credentials
        provider:
          keycloak:
            token-uri: ${spring.security.oauth2.url}/realms/${spring.security.oauth2.realm}/protocol/openid-connect/token
      resourceserver:
        jwt:
          issuer-uri: ${spring.security.oauth2.url}/realms/${spring.security.oauth2.realm}
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP-SERVERS:localhost:9092}
    notifications-topic: ${NOTIFICATIONS-TOPIC:notifications}
    consumer:
      group-id: ${CONSUMER_GROUP:notification-service-group}
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  mail:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${MAIL_USER:tdfyhujosfj@gmail.com}
    password: ${MAIL_PASSWORD:btcf dsbz agmm fjjx}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  messages:
    basename: messages
server:
  site_url: ${SITE_URL:https://muse.innoca.local}
  servlet:
    context-path: /api/notifications
  port: ${SERVER_PORT:81}
management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true